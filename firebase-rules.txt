// Firestore Security Rules for PokerElo
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow other users to read basic profile info
    }
    
    // Games collection - players in the game can read/write
    match /games/{gameId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid in resource.data.playerIds || 
         request.auth.uid in request.resource.data.playerIds);
    }
    
    // Queue collection - users can manage their own queue entries
    match /queue/{queueId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Seasons collection - read-only for all authenticated users
    match /seasons/{seasonId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write seasons (handle via admin SDK)
    }
    
    // Leaderboards collection - read-only for all authenticated users
    match /leaderboards/{leaderboardId} {
      allow read: if request.auth != null;
      allow write: if false; // Auto-generated, no direct writes
    }
  }
}

// Realtime Database Security Rules (if you use Realtime Database)
{
  "rules": {
    "users": {
      "$userId": {
        ".read": "$userId === auth.uid",
        ".write": "$userId === auth.uid"
      }
    },
    "games": {
      "$gameId": {
        ".read": "auth != null && (auth.uid in data.playerIds)",
        ".write": "auth != null && (auth.uid in data.playerIds)"
      }
    },
    "queue": {
      "$queueId": {
        ".read": "auth != null && auth.uid == data.userId",
        ".write": "auth != null && auth.uid == data.userId"
      }
    },
    "seasons": {
      ".read": "auth != null",
      ".write": false
    }
  }
}

// Storage Security Rules (for any file uploads like avatars)
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // User avatars
    match /avatars/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Game assets (read-only)
    match /assets/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if false;
    }
  }
}